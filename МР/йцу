5.1 Отображение списков
5.1.1 Разработать класс User, в котором определить свойства Login и Password
5.1.2 Добавить в приложение новую страницу для отображения списка пользователей UserListView и UserListViewModel для нее. 
5.1.3 На странице расположите элемент управления ListBox, привяжите его ItemsSource к свойству ObservableCollection<User> Users (создайте это свойство во UserListViewModel и заполните тестовым набором значений)

5.2 Шаблоны элементов списка
5.2.1 Определите шаблон для элементов списка: в строке отображайте логин, пароль и кнопку «Удалить»
5.2.2 Определите привязки для элементов управления. Внутри списка для каждого его элемента контекстом привязки будет являться объект User.
5.2.3 Для привязки кнопки «Удалить» необходимо указать более сложный путь привязки через родительский элемент:
{Binding $parent[UserControl].DataContext.DeleteCommand}
Таким образом будет осуществлена привязка данных к контексту данных страницы.
5.2.4 При нажатии пользователем на кнопку запись User должна удаляться из списка

5.3 Добавление элементов в список
5.3.1 Добавить на страницу кнопку Добавить и поля ввода для указания логина и пароля. 
5.3.2 Реализовать вставку нового пользователя в список. Данные нового пользователя брать из полей ввода. 

5.4 Работа с DataGrid
5.4.1 Добавить в проект nuget-пакет Avalonia.Controls.DataGrid
5.4.2 В файле App.axaml в раздел Application.Styles добавить 
<StyleInclude 
	Source="avares://Avalonia.Controls.DataGrid/Themes/Fluent.xaml"/>
5.4.3 Добавить на страницу элемент DataGrid, привязать к нему список пользователей
5.4.4 Настроить отображение колонок с информацией о пользователе 
<DataGrid.Columns>
     <DataGridTextColumn Header="Логин" Binding="{Binding Login}"/>
     ...
</DataGrid.Columns>
5.4.5 Добавить колонку с кнопкой «Удалить» при помощи DataGridTemplateColumn
5.4.6 Протестировать работу свойств DataGrid
CanUserReorderColumns="True"
CanUserResizeColumns="True"
CanUserSortColumns="True"

