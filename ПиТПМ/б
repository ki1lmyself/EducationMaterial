public class ChatHub : Hub
{
    private static ConcurrentDictionary<string, string> ConnectionToRoom = new();
    private static ConcurrentDictionary<string, string> ConnectionToUser = new();

    public async Task JoinRoom(string roomName, string userName)
    {
        var connectionId = Context.ConnectionId;
        ConnectionToRoom[connectionId] = roomName;
        ConnectionToUser[connectionId] = userName;
        await Groups.AddToGroupAsync(connectionId, roomName);
    }

    public async Task SendMessage(string message)
    {
        var connectionId = Context.ConnectionId;
        if (ConnectionToRoom.TryGetValue(connectionId, out var room) &&
            ConnectionToUser.TryGetValue(connectionId, out var user))
        {
            await Clients.Group(room).SendAsync("ReceiveMessage", user, message);
        }
    }

    public override async Task OnDisconnectedAsync(Exception? exception)
    {
        var connectionId = Context.ConnectionId;
        if (ConnectionToRoom.TryRemove(connectionId, out var room))
        {
            await Groups.RemoveFromGroupAsync(connectionId, room);
        }
        ConnectionToUser.TryRemove(connectionId, out _);
        await base.OnDisconnectedAsync(exception);
    }
}
