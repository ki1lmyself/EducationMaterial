5.1 Применение стилей в Avalonia
5.1.1 Создайте новый проект Avalonia
5.1.2 В UserControl.Styles создайте новый стиль. Используйте селектор «Button» для задания общего стиля всем кнопкам. Измените цвет фона и шрифт. Протестируйте стиль.
5.1.3 Добавьте стиль для TextBox, который применяется только к тем, у кого установлен атрибут Name="Title" (используйте селектор «TextBox#Title»). Протестируйте стиль.
5.1.4 Создайте стиль, который применяется только к кнопкам внутри StackPanel. Измените цвет фона и шрифт. Используйте селектор «StackPanel Button». Протестируйте стиль.
5.1.5 Создайте стиль для TextBlock, который применяет курсивное начертание, если его родитель Border содержит класс highlight (.highlight TextBlock). Протестируйте стиль.
5.2 Применение псевдоклассов
Так как стили большинства псевдоклассов определены в Fluent-теме Avalonia, а элементы состоят из других элементарных элементов, для переопределения свойств, используемых элементов требуется применять селекторы шаблона, например для изменения цвета границы у disabeled TextBox необходимо использовать селектор "TextBox:disabled /template/ Border#PART_BorderElement". Необходимые свойства можно узнать, изучив стандартные стили и шаблоны элементов управления Fluent:
https://github.com/AvaloniaUI/Avalonia/tree/master/src/Avalonia.Themes.Fluent/Controls
5.2.1 Создайте стиль для кнопки, который изменяет её цвет при наведении (:pointerover /template/ ContentPresenter#PART_ContentPresenter).
5.2.2 Добавьте стиль для TextBox, который меняет цвет границы при фокусировке (:focus /template/ Border#PART_BorderElement).
5.2.3 Создайте стиль для ListBoxItem, который меняет фон при выборе (:selected /template/ ContentPresenter#PART_ContentPresenter).
5.2.4 Создайте стиль для ListBoxItem, который определяет цвет фона для четных элементов (:nth-child(even)).
5.3 Привязка к стилям
5.3.1 Создайте 2 стиля для TextBlock, установите в них различный цвет текста.
5.3.2 Создайте класс MoneyOperation со следующими свойствами описание, сумма, является ли операция доходом или расходом.
5.3.3 Отобразите на странице список MoneyOperation, в шаблоне ItemTemplate которого определите цвет метки с суммой при помощи стиля на основании привязки к свойству логического типа. Пример привязки:
<Style Selector="TextBlock.class1">
	<Setter .../>
</Style>
<Style Selector="TextBlock.class2">
	<Setter .../>
</Style>
<TextBlock
             	Classes.class1="{Binding IsClass1}"
          Classes.class2="{Binding !IsClass1}"
          Text="{Binding Title}"/>
5.4 Стилизация элементов дочерних классов
5.4.1 Создайте стиль, определяющий фон для всех элементов-наследников Button (:is(Button))

5.5 Стилизация на основе значений
При помощи специализированных селекторов можно создавать стили, применяющиеся на основании значений свойств элементов, например «Button[IsCancel=true]» или «TextBlock[(Grid.Row)=0]»
5.5.1 Создайте стиль, который меняет цвет шрифта для TextBlock в которых установлен размер шрифта 16.

5.6 Изменение внешнего вида приложения с помощью Material Avalonia
5.6.1 Создать новый проект. Установить в проект nuget-пакет Material.Avalonia
5.6.2 В файле App.axaml добавить пространство имен
xmlns:themes="clr-namespace:Material.Styles.Themes;assembly=Material.Styles"
5.6.3 В стили приложения добавить
<themes:MaterialTheme BaseTheme="Light" PrimaryColor="Purple" SecondaryColor="Lime"/>
5.6.4 В MainView добавьте StackPanel и в ней добавьте следующие элементы управления
TextBlock
TextBox
Button
CheckBox
два RadioButton
DatePicker
ComboBox с двумя вложенными ComboBoxItem
С некоторыми особенностями и дополнительными возможностями использования элементов вы можете ознакомиться по  ссылке:
https://github.com/AvaloniaCommunity/Material.Avalonia/tree/master/Material.Avalonia.Demo/Pages
5.6.5 Сравнить внешний вид стандартных элементов управления и стилизованных
5.6.6 В MainView добавить 
xmlns:a="clr-namespace:Material.Styles.Assists;assembly=Material.Styles"
5.6.7 Используя приведенные настройки изменить внешний вид TextBox и ComboBox на Outlined
<TextBox a:TextFieldAssist.Label="TextBox"
		 UseFloatingWatermark="True"
		 Theme="{StaticResource OutlineTextBox}"
		 Classes="outline densed"
		 />

<ComboBox Theme="{StaticResource MaterialOutlineComboBox}" 
		  a:ComboBoxAssist.Label="ComboBox">
	<ComboBoxItem Content="Option 1"/>
	<ComboBoxItem Content="Option 2"/>
</ComboBox>
